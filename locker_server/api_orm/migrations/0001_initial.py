# Generated by Django 3.2.20 on 2023-10-02 07:31
import os
import json
import uuid
import bson.objectid

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


FIXTURE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))
FIXTURE_FILENAMES = ['country.json', 'e_member_role.json', 'e_ownership.json', 'member_role.json',
                     'mission.json', 'notification_category.json',
                     'plan_type.json', 'plan.json', 'promo_code_type.json',
                     'relay_domain.json', 'saas_market.json']


def get_swappable_model(fixture_filename):
    from locker_server.api_orm.models import wrapper, CountryORM, OwnershipORM, SaasMarketORM
    if fixture_filename == "country.json":
        return CountryORM
    elif fixture_filename == "e_member_role.json":
        return wrapper.get_enterprise_member_role_model()
    elif fixture_filename == "e_ownership.json":
        return OwnershipORM
    elif fixture_filename == "member_role.json":
        return wrapper.get_member_role_model()
    elif fixture_filename == "mission.json":
        return wrapper.get_mission_model()
    elif fixture_filename == "notification_category.json":
        return wrapper.get_notification_category_model()
    elif fixture_filename == "plan_type.json":
        return wrapper.get_plan_type_model()
    elif fixture_filename == "plan.json":
        return wrapper.get_plan_model()
    elif fixture_filename == "promo_code_type.json":
        return wrapper.get_promo_code_type_model()
    elif fixture_filename == "relay_domain.json":
        return wrapper.get_relay_domain_model()
    elif fixture_filename == "saas_market.json":
        return SaasMarketORM


def load_fixtures(apps, schema_editor):
    for fixture_filename in FIXTURE_FILENAMES:
        fixture_file = os.path.join(FIXTURE_DIR, fixture_filename)
        fixture = open(fixture_file, 'rb')
        data = json.loads(fixture.read())
        model_orm = get_swappable_model(fixture_filename=fixture_filename)
        if not model_orm:
            continue
        objs = []
        if fixture_filename == "relay_domain.json":
            try:
                if settings.RELAY_DOMAIN:
                    objs = [{
                        "model": "api_orm.RelayDomainORM",
                        "fields": {
                            "id": settings.RELAY_DOMAIN
                        }
                    }]
                else:
                    continue
            except AttributeError:
                continue
        if fixture_filename == "plan.json":
            for d in data:
                fields = d.get("fields")
                fields["plan_type_id"] = fields.get("plan_type")
                fields.pop("plan_type", None)
                d["fields"] = fields
        for d in data:
            objs.append(model_orm(**d.get("fields")))

        results = model_orm.objects.bulk_create(objs, ignore_conflicts=True, batch_size=100)
        print(f"[+] Done load {len(results)} objects from {fixture_filename}")


def unload_fixtures(apps, schema_editor):
    """ Brutally deleting all entries for this model... """

    for fixture_filename in FIXTURE_FILENAMES:
        model_orm = get_swappable_model(fixture_filename=fixture_filename)
        if not model_orm:
            continue
        model_orm.objects.all().delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CipherORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField()),
                ('deleted_date', models.FloatField(null=True)),
                ('last_use_date', models.FloatField(null=True)),
                ('num_use', models.IntegerField(default=0)),
                ('reprompt', models.IntegerField(default=0)),
                ('score', models.FloatField(default=0)),
                ('type', models.IntegerField()),
                ('data', models.TextField(blank=True, null=True)),
                ('favorites', models.TextField(blank=True, null=True)),
                ('folders', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'db_table': 'cs_ciphers',
                'abstract': False,
                'swappable': 'LS_CIPHER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='DeletedRelayAddressORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_hash', models.CharField(db_index=True, max_length=64)),
                ('num_forwarded', models.PositiveIntegerField(default=0)),
                ('num_blocked', models.PositiveIntegerField(default=0)),
                ('num_replied', models.PositiveIntegerField(default=0)),
                ('num_spam', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'cs_deleted_relay_addresses',
                'abstract': False,
                'swappable': 'LS_RELAY_DELETED_ADDRESS_MODEL',
            },
        ),
        migrations.CreateModel(
            name='DeviceORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.FloatField()),
                ('refresh_token', models.CharField(max_length=255)),
                ('token_type', models.CharField(max_length=128)),
                ('scope', models.CharField(max_length=255)),
                ('client_id', models.CharField(max_length=128)),
                ('device_name', models.CharField(max_length=128, null=True)),
                ('device_type', models.IntegerField(null=True)),
                ('device_identifier', models.CharField(max_length=128)),
                ('fcm_id', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('last_login', models.FloatField(null=True)),
                ('os', models.CharField(blank=True, default='', max_length=255)),
                ('browser', models.CharField(blank=True, default='', max_length=255)),
            ],
            options={
                'db_table': 'cs_devices',
                'abstract': False,
                'swappable': 'LS_DEVICE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='DomainORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.FloatField()),
                ('updated_time', models.FloatField(null=True)),
                ('domain', models.CharField(max_length=128)),
                ('root_domain', models.CharField(max_length=128)),
                ('verification', models.BooleanField(default=False)),
                ('auto_approve', models.BooleanField(default=False)),
                ('is_notify_failed', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'e_domains',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_DOMAIN_MODEL',
            },
        ),
        migrations.CreateModel(
            name='EnterpriseGroupORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'e_enterprise_groups',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_GROUP_MODEL',
            },
        ),
        migrations.CreateModel(
            name='EnterpriseMemberRoleORM',
            fields=[
                ('name', models.CharField(max_length=45, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'e_member_roles',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_MEMBER_ROLE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='EnterpriseORM',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('name', models.CharField(default='My Enterprise', max_length=128)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField(null=True)),
                ('locked', models.BooleanField(default=False)),
                ('enterprise_name', models.CharField(blank=True, default='', max_length=128)),
                ('enterprise_address1', models.CharField(blank=True, default='', max_length=255)),
                ('enterprise_address2', models.CharField(blank=True, default='', max_length=255)),
                ('enterprise_phone', models.CharField(blank=True, default='', max_length=128)),
                ('enterprise_country', models.CharField(blank=True, default='', max_length=128)),
                ('enterprise_postal_code', models.CharField(blank=True, default='', max_length=16)),
                ('init_seats', models.IntegerField(default=None, null=True)),
                ('init_seats_expired_time', models.FloatField(default=None, null=True)),
            ],
            options={
                'db_table': 'e_enterprises',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='EnterprisePolicyORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=False)),
                ('policy_type', models.CharField(max_length=128)),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policies', to=settings.LS_ENTERPRISE_MODEL)),
            ],
            options={
                'db_table': 'e_policy',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_POLICY_MODEL',
                'unique_together': {('enterprise', 'policy_type')},
            },
        ),
        migrations.CreateModel(
            name='EventORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=16)),
                ('acting_user_id', models.IntegerField(null=True)),
                ('user_id', models.IntegerField(null=True)),
                ('cipher_id', models.CharField(max_length=128, null=True)),
                ('collection_id', models.CharField(max_length=128, null=True)),
                ('creation_date', models.FloatField()),
                ('device_type', models.IntegerField(null=True)),
                ('group_id', models.CharField(max_length=128, null=True)),
                ('ip_address', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('team_id', models.CharField(max_length=128, null=True)),
                ('team_member_id', models.CharField(max_length=128, null=True)),
                ('policy_id', models.CharField(max_length=128, null=True)),
                ('provider_id', models.CharField(max_length=128, null=True)),
                ('team_provider_id', models.CharField(max_length=128, null=True)),
                ('user_provider_id', models.CharField(max_length=128, null=True)),
                ('metadata', models.TextField(blank=True, default=None, max_length=512, null=True)),
            ],
            options={
                'db_table': 'cs_events',
                'abstract': False,
                'swappable': 'LS_EVENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='MemberRoleORM',
            fields=[
                ('name', models.CharField(max_length=45, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cs_member_roles',
                'abstract': False,
                'swappable': 'LS_MEMBER_ROLE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='MissionORM',
            fields=[
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128)),
                ('description_en', models.CharField(blank=True, default='', max_length=255)),
                ('description_vi', models.CharField(blank=True, default='', max_length=255)),
                ('created_time', models.IntegerField()),
                ('mission_type', models.CharField(max_length=64)),
                ('order_index', models.IntegerField()),
                ('available', models.BooleanField(default=True)),
                ('extra_requirements', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('reward_type', models.CharField(default='promo_code', max_length=64)),
                ('reward_value', models.FloatField(default=0)),
            ],
            options={
                'db_table': 'cs_missions',
                'ordering': ['-order_index'],
                'abstract': False,
                'swappable': 'LS_MISSION_MODEL',
            },
        ),
        migrations.CreateModel(
            name='NotificationCategoryORM',
            fields=[
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('name_vi', models.CharField(blank=True, max_length=128)),
                ('notification', models.BooleanField(default=True)),
                ('mail', models.BooleanField(default=True)),
                ('order_number', models.IntegerField()),
            ],
            options={
                'db_table': 'cs_notification_categories',
                'abstract': False,
                'swappable': 'LS_NOTIFICATION_CATEGORY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PaymentORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_id', models.CharField(default=None, max_length=128, null=True)),
                ('created_time', models.FloatField()),
                ('total_price', models.FloatField(default=0)),
                ('discount', models.FloatField(default=0)),
                ('currency', models.CharField(default='USD', max_length=8)),
                ('status', models.CharField(max_length=64)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('transaction_type', models.CharField(default='Payment', max_length=128)),
                ('payment_method', models.CharField(max_length=64, null=True)),
                ('failure_reason', models.CharField(blank=True, max_length=128, null=True)),
                ('stripe_invoice_id', models.CharField(max_length=128, null=True)),
                ('mobile_invoice_id', models.CharField(max_length=128, null=True)),
                ('code', models.CharField(max_length=128, null=True)),
                ('bank_id', models.IntegerField(default=None, null=True)),
                ('scope', models.CharField(default='pwdmanager', max_length=255)),
                ('plan', models.CharField(max_length=255)),
                ('duration', models.CharField(default='monthly', max_length=16)),
                ('metadata', models.TextField(blank=True, default='')),
                ('enterprise_id', models.CharField(default=None, max_length=128, null=True)),
            ],
            options={
                'db_table': 'cs_payments',
                'abstract': False,
                'swappable': 'LS_PAYMENT_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PlanTypeORM',
            fields=[
                ('name', models.CharField(max_length=128, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cs_plan_types',
                'abstract': False,
                'swappable': 'LS_PLAN_TYPE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PromoCodeTypeORM',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'cs_promo_code_types',
                'abstract': False,
                'swappable': 'LS_PROMO_CODE_TYPE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='RelayDomainORM',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cs_relay_domains',
                'abstract': False,
                'swappable': 'LS_RELAY_DOMAIN_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ReleaseORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.IntegerField()),
                ('major', models.CharField(max_length=16)),
                ('minor', models.CharField(max_length=16)),
                ('patch', models.CharField(blank=True, default='', max_length=16)),
                ('build_number', models.CharField(blank=True, default='', max_length=16)),
                ('description_en', models.CharField(blank=True, default='', max_length=512)),
                ('description_vi', models.CharField(blank=True, default='', max_length=512)),
                ('client_id', models.CharField(max_length=128)),
                ('environment', models.CharField(default='prod', max_length=128)),
            ],
            options={
                'db_table': 'cs_releases',
                'abstract': False,
                'swappable': 'LS_RELEASE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='ReplyORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lookup', models.CharField(db_index=True, max_length=255)),
                ('encrypted_metadata', models.TextField()),
                ('created_at', models.FloatField()),
            ],
            options={
                'db_table': 'cs_reply',
                'abstract': False,
                'swappable': 'LS_RELAY_REPLY_MODEL',
            },
        ),
        migrations.CreateModel(
            name='TeamORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='My Team', max_length=128)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('creation_date', models.FloatField(null=True)),
                ('revision_date', models.FloatField(null=True)),
                ('locked', models.BooleanField(default=False)),
                ('business_name', models.CharField(blank=True, default='', max_length=128)),
                ('key', models.CharField(max_length=512, null=True)),
                ('default_collection_name', models.CharField(max_length=512, null=True)),
                ('public_key', models.TextField(null=True)),
                ('private_key', models.TextField(null=True)),
                ('personal_share', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'cs_teams',
                'abstract': False,
                'swappable': 'LS_TEAM_MODEL',
            },
        ),
        migrations.CreateModel(
            name='UserORM',
            fields=[
                ('internal_id', models.CharField(default=uuid.uuid4, max_length=64, null=True)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField(null=True)),
                ('first_login', models.FloatField(null=True)),
                ('activated', models.BooleanField(default=False)),
                ('activated_date', models.FloatField(null=True)),
                ('delete_account_date', models.FloatField(null=True)),
                ('account_revision_date', models.FloatField(null=True)),
                ('master_password', models.CharField(max_length=300, null=True)),
                ('master_password_hint', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('master_password_score', models.FloatField(default=0)),
                ('security_stamp', models.CharField(max_length=50, null=True)),
                ('key', models.TextField(null=True)),
                ('public_key', models.TextField(null=True)),
                ('private_key', models.TextField(null=True)),
                ('kdf', models.IntegerField(default=0)),
                ('kdf_iterations', models.IntegerField(default=100000)),
                ('api_key', models.CharField(max_length=32, null=True)),
                ('timeout', models.IntegerField(default=20160)),
                ('timeout_action', models.CharField(default='lock', max_length=16)),
                ('is_leaked', models.BooleanField(default=False)),
                ('use_relay_subdomain', models.BooleanField(default=False)),
                ('last_request_login', models.FloatField(default=None, null=True)),
                ('login_failed_attempts', models.IntegerField(default=0)),
                ('login_block_until', models.FloatField(default=None, null=True)),
                ('login_method', models.CharField(default='password', max_length=32)),
                ('fd_credential_id', models.CharField(max_length=255, null=True)),
                ('fd_random', models.CharField(max_length=128, null=True)),
                ('onboarding_process', models.TextField(blank=True, default={'enterprise_onboarding': [], 'enterprise_onboarding_skip': False, 'tutorial': False, 'tutorial_process': [], 'vault_to_dashboard': False, 'welcome': False}, max_length=512)),
                ('saas_source', models.CharField(default=None, max_length=32, null=True)),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, null=True, unique=True)),
                ('full_name', models.CharField(max_length=255, null=True)),
                ('language', models.CharField(default='en', max_length=4)),
                ('is_factor2', models.BooleanField(default=False)),
                ('base32_secret_factor2', models.CharField(blank=True, default='', max_length=16)),
            ],
            options={
                'db_table': 'cs_users',
                'abstract': False,
                'swappable': 'LS_USER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='AffiliateSubmissionORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.FloatField()),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=128)),
                ('phone', models.CharField(max_length=128)),
                ('company', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('country', models.CharField(default=None, max_length=128, null=True)),
                ('status', models.CharField(default='submitted', max_length=64)),
            ],
            options={
                'db_table': 'cs_affiliate_submissions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountryORM',
            fields=[
                ('country_code', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=128)),
                ('country_phone_code', models.CharField(default=None, max_length=10)),
            ],
            options={
                'db_table': 'cs_countries',
            },
        ),
        migrations.CreateModel(
            name='OwnershipORM',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, default='', max_length=128)),
            ],
            options={
                'db_table': 'e_ownership',
            },
        ),
        migrations.CreateModel(
            name='PermissionORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('scope', models.CharField(max_length=128)),
                ('codename', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
            ],
            options={
                'db_table': 'cs_permissions',
                'unique_together': {('scope', 'codename')},
            },
        ),
        migrations.CreateModel(
            name='SaasMarketORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('lifetime_duration', models.PositiveIntegerField(default=None, null=True)),
            ],
            options={
                'db_table': 'cs_saas_markets',
            },
        ),
        migrations.CreateModel(
            name='PMUserPlanORM',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='pm_user_plan', serialize=False, to=settings.LS_USER_MODEL)),
                ('duration', models.CharField(default='monthly', max_length=128)),
                ('start_period', models.FloatField(default=None, null=True)),
                ('end_period', models.FloatField(default=None, null=True)),
                ('cancel_at_period_end', models.BooleanField(default=False)),
                ('custom_endtime', models.FloatField(default=None, null=True)),
                ('default_payment_method', models.CharField(default='card', max_length=128)),
                ('ref_plan_code', models.CharField(default=None, max_length=128, null=True)),
                ('number_members', models.IntegerField(default=1)),
                ('personal_trial_applied', models.BooleanField(default=False)),
                ('enterprise_trial_applied', models.BooleanField(default=False)),
                ('personal_trial_mobile_applied', models.BooleanField(default=False)),
                ('personal_trial_web_applied', models.BooleanField(default=False)),
                ('pm_stripe_subscription', models.CharField(max_length=255, null=True)),
                ('pm_stripe_subscription_created_time', models.IntegerField(null=True)),
                ('pm_mobile_subscription', models.CharField(default=None, max_length=255, null=True)),
                ('extra_time', models.IntegerField(default=0)),
                ('extra_plan', models.CharField(default=None, max_length=128, null=True)),
                ('member_billing_updated_time', models.FloatField(default=None, null=True)),
                ('attempts', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'cs_pm_user_plan',
                'abstract': False,
                'swappable': 'LS_USER_PLAN_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Policy2FAORM',
            fields=[
                ('policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='policy_2fa', serialize=False, to=settings.LS_ENTERPRISE_POLICY_MODEL)),
                ('only_admin', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'e_policy_2fa',
            },
        ),
        migrations.CreateModel(
            name='PolicyFailedLoginORM',
            fields=[
                ('policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='policy_failed_login', serialize=False, to=settings.LS_ENTERPRISE_POLICY_MODEL)),
                ('failed_login_attempts', models.IntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('failed_login_duration', models.IntegerField(default=600, validators=[django.core.validators.MinValueValidator(1)])),
                ('failed_login_block_time', models.IntegerField(default=900, validators=[django.core.validators.MinValueValidator(1)])),
                ('failed_login_owner_email', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'e_policy_failed_login',
            },
        ),
        migrations.CreateModel(
            name='PolicyMasterPasswordORM',
            fields=[
                ('policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='policy_master_password_requirement', serialize=False, to=settings.LS_ENTERPRISE_POLICY_MODEL)),
                ('min_length', models.IntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(128)])),
                ('require_lower_case', models.BooleanField(default=False)),
                ('require_upper_case', models.BooleanField(default=False)),
                ('require_special_character', models.BooleanField(default=False)),
                ('require_digit', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'e_policy_master_password',
            },
        ),
        migrations.CreateModel(
            name='PolicyPasswordlessORM',
            fields=[
                ('policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='policy_passwordless', serialize=False, to=settings.LS_ENTERPRISE_POLICY_MODEL)),
                ('only_allow_passwordless', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'e_policy_passwordless',
            },
        ),
        migrations.CreateModel(
            name='PolicyPasswordORM',
            fields=[
                ('policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='policy_password_requirement', serialize=False, to=settings.LS_ENTERPRISE_POLICY_MODEL)),
                ('min_length', models.IntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(128)])),
                ('require_lower_case', models.BooleanField(default=False)),
                ('require_upper_case', models.BooleanField(default=False)),
                ('require_special_character', models.BooleanField(default=False)),
                ('require_digit', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'e_policy_password',
            },
        ),
        migrations.CreateModel(
            name='UserScoreORM',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_score', serialize=False, to=settings.LS_USER_MODEL)),
                ('cipher0', models.FloatField(default=0)),
                ('cipher1', models.FloatField(default=0)),
                ('cipher2', models.FloatField(default=0)),
                ('cipher3', models.FloatField(default=0)),
                ('cipher4', models.FloatField(default=0)),
                ('cipher5', models.FloatField(default=0)),
                ('cipher6', models.FloatField(default=0)),
                ('cipher7', models.FloatField(default=0)),
            ],
            options={
                'db_table': 'cs_user_score',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentItemORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(default=1)),
                ('team_id', models.CharField(blank=True, default=None, max_length=128, null=True)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_items', to=settings.LS_PAYMENT_MODEL)),
            ],
            options={
                'db_table': 'cs_payment_items',
            },
        ),
        migrations.CreateModel(
            name='NotificationORM',
            fields=[
                ('id', models.CharField(default=bson.objectid.ObjectId, max_length=64, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=128)),
                ('scope', models.CharField(db_index=True, default='pwdmanager', max_length=64)),
                ('publish_time', models.FloatField(db_index=True)),
                ('title', models.TextField(max_length=512)),
                ('description', models.TextField(blank=True, default='', max_length=512, null=True)),
                ('metadata', models.TextField(blank=True, default='', null=True)),
                ('read', models.BooleanField(default=False)),
                ('read_time', models.FloatField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_notifications',
            },
        ),
        migrations.CreateModel(
            name='Factor2MethodORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(max_length=64)),
                ('is_activate', models.BooleanField()),
                ('activate_code', models.CharField(blank=True, default='', max_length=16)),
                ('code_expired_time', models.IntegerField(default=0)),
                ('updated_time', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='factor2_methods', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_factor2_methods',
                'unique_together': {('method', 'user')},
            },
        ),
        migrations.CreateModel(
            name='DeviceFactor2ORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('expired_time', models.FloatField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_factor2', to=settings.LS_DEVICE_MODEL)),
                ('factor2_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_factor2', to='api_orm.factor2methodorm')),
            ],
            options={
                'db_table': 'cs_device_factor2',
            },
        ),
        migrations.CreateModel(
            name='CustomerORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=255, null=True)),
                ('organization', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('address', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('city', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('state', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('postal_code', models.CharField(blank=True, default='', max_length=16, null=True)),
                ('phone_number', models.CharField(blank=True, default='', max_length=32, null=True)),
                ('last4', models.CharField(blank=True, default='', max_length=10, null=True)),
                ('brand', models.CharField(blank=True, default='', max_length=32, null=True)),
                ('country', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', to='api_orm.countryorm')),
            ],
            options={
                'db_table': 'cs_customers',
            },
        ),
        migrations.CreateModel(
            name='TeamMemberORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('external_id', models.CharField(max_length=300, null=True)),
                ('access_time', models.IntegerField()),
                ('is_default', models.BooleanField(default=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_added_by_group', models.BooleanField(default=False)),
                ('hide_passwords', models.BooleanField(default=False)),
                ('key', models.TextField(null=True)),
                ('reset_password_key', models.TextField(null=True)),
                ('status', models.CharField(default='confirmed', max_length=128)),
                ('email', models.CharField(max_length=128, null=True)),
                ('token_invitation', models.TextField(default=None, null=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to=settings.LS_MEMBER_ROLE_MODEL)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to=settings.LS_TEAM_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_team_members',
                'abstract': False,
                'swappable': 'LS_TEAM_MEMBER_MODEL',
                'unique_together': {('user', 'team', 'role')},
            },
        ),
        migrations.CreateModel(
            name='RelaySubdomainORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdomain', models.CharField(db_index=True, max_length=128)),
                ('created_time', models.FloatField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relay_subdomains', to=settings.LS_RELAY_DOMAIN_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relay_subdomains', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_relay_subdomains',
                'abstract': False,
                'swappable': 'LS_RELAY_SUBDOMAIN_MODEL',
                'unique_together': {('subdomain', 'domain')},
            },
        ),
        migrations.CreateModel(
            name='RelayAddressORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=64, unique=True)),
                ('enabled', models.BooleanField(default=True)),
                ('block_spam', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=64)),
                ('created_time', models.FloatField()),
                ('updated_time', models.FloatField(null=True)),
                ('num_forwarded', models.PositiveIntegerField(default=0)),
                ('num_blocked', models.PositiveIntegerField(default=0)),
                ('num_replied', models.PositiveIntegerField(default=0)),
                ('num_spam', models.PositiveIntegerField(default=0)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relay_addresses', to=settings.LS_RELAY_DOMAIN_MODEL)),
                ('subdomain', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relay_addresses', to=settings.LS_RELAY_SUBDOMAIN_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relay_addresses', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_relay_addresses',
                'abstract': False,
                'swappable': 'LS_RELAY_ADDRESS_MODEL',
            },
        ),
        migrations.CreateModel(
            name='QuickShareORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('access_id', models.CharField(max_length=128, unique=True)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField()),
                ('deleted_date', models.FloatField(null=True)),
                ('type', models.IntegerField()),
                ('data', models.TextField(blank=True, null=True)),
                ('key', models.TextField(null=True)),
                ('password', models.CharField(max_length=512, null=True)),
                ('each_email_access_count', models.PositiveIntegerField(null=True)),
                ('max_access_count', models.PositiveIntegerField(null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('expiration_date', models.FloatField(null=True)),
                ('disabled', models.FloatField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('require_otp', models.BooleanField(default=True)),
                ('cipher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quick_shares', to=settings.LS_CIPHER_MODEL)),
            ],
            options={
                'db_table': 'cs_quick_shares',
                'abstract': False,
                'swappable': 'LS_QUICK_SHARE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PromoCodeORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=100, primary_key=True, serialize=False)),
                ('created_time', models.FloatField(null=True)),
                ('expired_time', models.FloatField()),
                ('remaining_times', models.IntegerField(default=0)),
                ('valid', models.BooleanField(default=True)),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
                ('value', models.FloatField(default=0)),
                ('limit_value', models.FloatField(null=True)),
                ('duration', models.IntegerField(default=1)),
                ('specific_duration', models.CharField(default=None, max_length=128, null=True)),
                ('currency', models.CharField(default='USD', max_length=8)),
                ('description_en', models.TextField(blank=True, default='')),
                ('description_vi', models.TextField(blank=True, default='')),
                ('is_saas_code', models.BooleanField(default=False)),
                ('saas_plan', models.CharField(default=None, max_length=128, null=True)),
                ('only_period', models.CharField(default=None, max_length=128, null=True)),
                ('only_plan', models.CharField(default=None, max_length=128, null=True)),
                ('only_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='only_promo_codes', to=settings.LS_USER_MODEL)),
                ('saas_market', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='promo_codes', to='api_orm.saasmarketorm')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promo_codes', to=settings.LS_PROMO_CODE_TYPE_MODEL)),
            ],
            options={
                'db_table': 'cs_promo_codes',
                'abstract': False,
                'swappable': 'LS_PROMO_CODE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PMPlanORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('alias', models.CharField(blank=True, default='', max_length=128)),
                ('name', models.CharField(max_length=128)),
                ('price_usd', models.FloatField()),
                ('price_vnd', models.FloatField()),
                ('half_yearly_price_usd', models.FloatField(default=0)),
                ('half_yearly_price_vnd', models.FloatField(default=0)),
                ('yearly_price_usd', models.FloatField(default=0)),
                ('yearly_price_vnd', models.FloatField(default=0)),
                ('sync_device', models.IntegerField(default=None, null=True)),
                ('limit_password', models.IntegerField(default=None, null=True)),
                ('limit_secure_note', models.IntegerField(default=None, null=True)),
                ('limit_identity', models.IntegerField(default=None, null=True)),
                ('limit_payment_card', models.IntegerField(default=None, null=True)),
                ('limit_crypto_asset', models.IntegerField(default=None, null=True)),
                ('tools_password_reuse', models.BooleanField(default=False)),
                ('tools_master_password_check', models.BooleanField(default=False)),
                ('tools_data_breach', models.BooleanField(default=False)),
                ('emergency_access', models.BooleanField(default=False)),
                ('personal_share', models.BooleanField(default=False)),
                ('relay_premium', models.BooleanField(default=False)),
                ('is_family_plan', models.BooleanField(default=False)),
                ('is_team_plan', models.BooleanField(default=False)),
                ('max_number', models.IntegerField(default=None, null=True)),
                ('team_dashboard', models.BooleanField(default=False)),
                ('team_policy', models.BooleanField(default=False)),
                ('team_prevent_password', models.BooleanField(default=False)),
                ('team_activity_log', models.BooleanField(default=False)),
                ('plan_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pm_plans', to=settings.LS_PLAN_TYPE_MODEL)),
            ],
            options={
                'db_table': 'cs_pm_plans',
                'abstract': False,
                'swappable': 'LS_PLAN_MODEL',
            },
        ),
        migrations.AddField(
            model_name='paymentorm',
            name='customer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='api_orm.customerorm'),
        ),
        migrations.AddField(
            model_name='paymentorm',
            name='promo_code',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to=settings.LS_PROMO_CODE_MODEL),
        ),
        migrations.AddField(
            model_name='paymentorm',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.LS_USER_MODEL),
        ),
        migrations.CreateModel(
            name='GroupORM',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('access_all', models.BooleanField(default=True)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField(null=True)),
                ('enterprise_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sharing_groups', to=settings.LS_ENTERPRISE_GROUP_MODEL)),
                ('role', models.ForeignKey(default='member', on_delete=django.db.models.deletion.CASCADE, related_name='sharing_groups', to=settings.LS_MEMBER_ROLE_MODEL)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to=settings.LS_TEAM_MODEL)),
            ],
            options={
                'db_table': 'cs_groups',
                'abstract': False,
                'swappable': 'LS_GROUP_MODEL',
                'unique_together': {('team', 'enterprise_group')},
            },
        ),
        migrations.CreateModel(
            name='FolderORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_folders',
                'abstract': False,
                'swappable': 'LS_FOLDER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='EnterpriseMemberORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('access_time', models.IntegerField()),
                ('is_default', models.BooleanField(default=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_activated', models.BooleanField(default=True)),
                ('status', models.CharField(default='confirmed', max_length=128)),
                ('email', models.CharField(max_length=128, null=True)),
                ('token_invitation', models.TextField(default=None, null=True)),
                ('domain', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='enterprise_members', to=settings.LS_ENTERPRISE_DOMAIN_MODEL)),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enterprise_members', to=settings.LS_ENTERPRISE_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enterprise_members', to=settings.LS_ENTERPRISE_MEMBER_ROLE_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enterprise_members', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'e_members',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_MEMBER_MODEL',
                'unique_together': {('user', 'enterprise', 'role')},
            },
        ),
        migrations.AddField(
            model_name='enterprisegrouporm',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_enterprise_groups', to=settings.LS_USER_MODEL),
        ),
        migrations.AddField(
            model_name='enterprisegrouporm',
            name='enterprise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to=settings.LS_ENTERPRISE_MODEL),
        ),
        migrations.CreateModel(
            name='EmergencyAccessORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('creation_date', models.IntegerField()),
                ('revision_date', models.IntegerField()),
                ('last_notification_date', models.IntegerField(null=True)),
                ('recovery_initiated_date', models.IntegerField(null=True)),
                ('status', models.CharField(default='invited', max_length=128)),
                ('type', models.CharField(max_length=128)),
                ('wait_time_days', models.PositiveSmallIntegerField(default=7)),
                ('key_encrypted', models.TextField(null=True)),
                ('email', models.CharField(max_length=128, null=True)),
                ('grantee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='emergency_grantees', to=settings.LS_USER_MODEL)),
                ('grantor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_grantors', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_emergency_access',
                'abstract': False,
                'swappable': 'LS_EMERGENCY_ACCESS_MODEL',
            },
        ),
        migrations.AddField(
            model_name='domainorm',
            name='enterprise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to=settings.LS_ENTERPRISE_MODEL),
        ),
        migrations.AddField(
            model_name='deviceorm',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_devices', to=settings.LS_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DeviceAccessTokenORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.TextField()),
                ('expired_time', models.FloatField()),
                ('grant_type', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('sso_token_id', models.CharField(default=None, max_length=128, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_access_tokens', to=settings.LS_DEVICE_MODEL)),
            ],
            options={
                'db_table': 'cs_device_access_tokens',
                'abstract': False,
                'swappable': 'LS_DEVICE_ACCESS_TOKEN_MODEL',
            },
        ),
        migrations.CreateModel(
            name='CollectionORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('creation_date', models.FloatField()),
                ('revision_date', models.FloatField(null=True)),
                ('external_id', models.CharField(max_length=300, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.LS_TEAM_MODEL)),
            ],
            options={
                'db_table': 'cs_collections',
                'abstract': False,
                'swappable': 'LS_COLLECTION_MODEL',
            },
        ),
        migrations.AddField(
            model_name='cipherorm',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_ciphers', to=settings.LS_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cipherorm',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ciphers', to=settings.LS_TEAM_MODEL),
        ),
        migrations.AddField(
            model_name='cipherorm',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ciphers', to=settings.LS_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserRewardMissionORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='not_started', max_length=64)),
                ('is_claimed', models.BooleanField(default=False)),
                ('completed_time', models.IntegerField(null=True)),
                ('answer', models.CharField(blank=True, default=None, max_length=512, null=True)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_reward_missions', to=settings.LS_MISSION_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_reward_missions', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_user_reward_missions',
                'abstract': False,
                'unique_together': {('user', 'mission')},
            },
        ),
        migrations.CreateModel(
            name='RolePermissionORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='api_orm.permissionorm')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to=settings.LS_MEMBER_ROLE_MODEL)),
            ],
            options={
                'db_table': 'cs_role_permissions',
                'unique_together': {('role', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='PMUserPlanFamilyORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.IntegerField()),
                ('email', models.CharField(max_length=128, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pm_plan_family', to=settings.LS_USER_MODEL)),
                ('root_user_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pm_plan_family', to=settings.LS_USER_PLAN_MODEL)),
            ],
            options={
                'db_table': 'cs_pm_user_plan_family',
            },
        ),
        migrations.CreateModel(
            name='ExcludeDomainORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('created_time', models.FloatField()),
                ('domain', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclude_domains', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_exclude_domains',
                'abstract': False,
                'unique_together': {('user', 'domain')},
            },
        ),
        migrations.CreateModel(
            name='EnterpriseRolePermissionORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enterprise_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enterprise_role_permissions', to=settings.LS_ENTERPRISE_MEMBER_ROLE_MODEL)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enterprise_role_permissions', to='api_orm.permissionorm')),
            ],
            options={
                'db_table': 'e_role_permissions',
                'unique_together': {('enterprise_role', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='EnterpriseBillingContactORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.FloatField()),
                ('email', models.EmailField(max_length=128)),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billing_contacts', to=settings.LS_ENTERPRISE_MODEL)),
            ],
            options={
                'db_table': 'e_billing_contacts',
                'unique_together': {('enterprise', 'email')},
            },
        ),
        migrations.CreateModel(
            name='DomainOwnershipORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=128)),
                ('value', models.CharField(max_length=128)),
                ('verification', models.BooleanField(default=False)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domain_ownership', to=settings.LS_ENTERPRISE_DOMAIN_MODEL)),
                ('ownership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domain_ownership', to='api_orm.ownershiporm')),
            ],
            options={
                'db_table': 'e_domain_ownership',
                'unique_together': {('domain', 'ownership')},
            },
        ),
        migrations.CreateModel(
            name='QuickShareEmailORM',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('creation_date', models.FloatField()),
                ('email', models.EmailField(max_length=255)),
                ('code', models.CharField(max_length=32, null=True)),
                ('code_expired_time', models.FloatField(null=True)),
                ('max_access_count', models.PositiveIntegerField(null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('quick_share', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quick_share_emails', to=settings.LS_QUICK_SHARE_MODEL)),
            ],
            options={
                'db_table': 'cs_quick_share_emails',
                'abstract': False,
                'swappable': 'LS_QUICK_SHARE_EMAIL_MODEL',
                'unique_together': {('quick_share', 'email')},
            },
        ),
        migrations.AddField(
            model_name='pmuserplanorm',
            name='pm_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pm_user_plan', to=settings.LS_PLAN_MODEL),
        ),
        migrations.AddField(
            model_name='pmuserplanorm',
            name='promo_code',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pm_user_plans', to=settings.LS_PROMO_CODE_MODEL),
        ),
        migrations.CreateModel(
            name='NotificationSettingORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification', models.BooleanField(default=True)),
                ('mail', models.BooleanField(default=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.LS_NOTIFICATION_CATEGORY_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.LS_USER_MODEL)),
            ],
            options={
                'db_table': 'cs_notification_settings',
                'abstract': False,
                'swappable': 'LS_NOTIFICATION_SETTING_MODEL',
                'unique_together': {('user', 'category')},
            },
        ),
        migrations.CreateModel(
            name='GroupMemberORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups_members', to=settings.LS_GROUP_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups_members', to=settings.LS_TEAM_MEMBER_MODEL)),
            ],
            options={
                'db_table': 'cs_groups_members',
                'abstract': False,
                'swappable': 'LS_GROUP_MEMBER_MODEL',
                'unique_together': {('group', 'member')},
            },
        ),
        migrations.CreateModel(
            name='EnterpriseGroupMemberORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_members', to=settings.LS_ENTERPRISE_GROUP_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups_members', to=settings.LS_ENTERPRISE_MEMBER_MODEL)),
            ],
            options={
                'db_table': 'e_groups_members',
                'abstract': False,
                'swappable': 'LS_ENTERPRISE_GROUP_MEMBER_MODEL',
                'unique_together': {('group', 'member')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='deviceorm',
            unique_together={('device_identifier', 'user')},
        ),
        migrations.CreateModel(
            name='CollectionMemberORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False)),
                ('hide_passwords', models.BooleanField(default=False)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections_members', to=settings.LS_COLLECTION_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections_members', to=settings.LS_TEAM_MEMBER_MODEL)),
            ],
            options={
                'db_table': 'cs_collections_members',
                'abstract': False,
                'swappable': 'LS_COLLECTION_MEMBER_MODEL',
                'unique_together': {('collection', 'member')},
            },
        ),
        migrations.CreateModel(
            name='CollectionCipherORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cipher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections_ciphers', to=settings.LS_CIPHER_MODEL)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections_ciphers', to=settings.LS_COLLECTION_MODEL)),
            ],
            options={
                'db_table': 'cs_collections_ciphers',
                'abstract': False,
                'swappable': 'LS_COLLECTION_CIPHER_MODEL',
                'unique_together': {('collection', 'cipher')},
            },
        ),
        migrations.AddIndex(
            model_name='pmuserplanorm',
            index=models.Index(fields=['pm_mobile_subscription'], name='cs_pm_user__pm_mobi_f3e434_idx'),
        ),
        # Load data from fixtures
        migrations.RunPython(load_fixtures, reverse_code=unload_fixtures),
    ]
