import jwt

from django.conf import settings
from django.db import models

from shared.constants.device_type import CLIENT_ID_MOBILE, CLIENT_ID_BROWSER, CLIENT_ID_DESKTOP
from shared.utils.app import now
from cystack_models.models.users.devices import Device


class DeviceAccessToken(models.Model):
    """
    The DeviceAccessToken is generated by a Device. It represents a session and stores some information about
    the user and device in `access_token`
    - access_token: JWT token string store the user's information and device's information
    - expired_time: The expired time
    - granted_type: It is usually refresh_token
    - device: The Device object
    - sso_token_id: The CyStack SSO Token ID
    """
    access_token = models.TextField()
    expired_time = models.FloatField()
    grant_type = models.CharField(max_length=128, blank=True, null=True, default="")
    sso_token_id = models.CharField(max_length=128, null=True, default=None)
    device = models.ForeignKey(Device, on_delete=models.CASCADE, related_name="device_access_tokens")

    class Meta:
        db_table = 'cs_device_access_tokens'

    @classmethod
    def create(cls, device: Device, **data):
        access_token = data.get("access_token")
        expired_time = data.get("expired_time")
        sso_token_id = data.get("sso_token_id")
        if not expired_time:
            expired_time = now() + data.get("expires_in", cls.get_token_duration(device.client_id))
        grant_type = data.get("grant_type", "refresh_token")
        new_token = cls(
            access_token=access_token, expired_time=expired_time, grant_type=grant_type,
            device=device, sso_token_id=sso_token_id
        )
        new_token.save()
        # Generate jwt access token
        new_token.access_token = new_token._gen_access_token_value(expired_time=expired_time)
        new_token.save()
        # Delete all expired token
        cls.objects.filter(device__user=device.user, expired_time__lt=now()).delete()
        return new_token

    @classmethod
    def get_token_duration(cls, client_id):
        if client_id in [CLIENT_ID_MOBILE, CLIENT_ID_BROWSER, CLIENT_ID_DESKTOP]:
            return 30 * 86400
        return 4 * 3600

    def _gen_access_token_value(self, expired_time):
        created_time = now()
        payload = {
            "nbf": created_time,
            "exp": expired_time,
            "iss": "https://locker.io",
            "client_id": self.device.client_id,
            "sub": self.device.user.internal_id,
            "auth_time": created_time,
            "idp": "cystack",
            "email_verified": self.device.user.activated,
            "scope": ["api", "offline_access"],
            "jti": self.id,
            "device": self.device.device_identifier,
            "orgowner": "",
            "iat": created_time,
            "amr": ["Application"]
        }
        token = jwt.encode(payload, settings.SECRET_KEY, algorithm='HS256')
        return token
